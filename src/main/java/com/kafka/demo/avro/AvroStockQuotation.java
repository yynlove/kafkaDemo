/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafka.demo.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroStockQuotation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -293199065409136332L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroStockQuotation\",\"namespace\":\"com.kafka.demo.avro\",\"fields\":[{\"name\":\"stockCode\",\"type\":\"string\"},{\"name\":\"stockName\",\"type\":\"string\"},{\"name\":\"tradeTime\",\"type\":\"long\"},{\"name\":\"preClosePrice\",\"type\":\"float\"},{\"name\":\"openPrice\",\"type\":\"float\"},{\"name\":\"currentPrice\",\"type\":\"float\"},{\"name\":\"highPrice\",\"type\":\"float\"},{\"name\":\"lowPrice\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroStockQuotation> ENCODER =
      new BinaryMessageEncoder<AvroStockQuotation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroStockQuotation> DECODER =
      new BinaryMessageDecoder<AvroStockQuotation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroStockQuotation> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroStockQuotation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroStockQuotation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroStockQuotation>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroStockQuotation to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroStockQuotation from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroStockQuotation instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroStockQuotation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence stockCode;
   private java.lang.CharSequence stockName;
   private long tradeTime;
   private float preClosePrice;
   private float openPrice;
   private float currentPrice;
   private float highPrice;
   private float lowPrice;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroStockQuotation() {}

  /**
   * All-args constructor.
   * @param stockCode The new value for stockCode
   * @param stockName The new value for stockName
   * @param tradeTime The new value for tradeTime
   * @param preClosePrice The new value for preClosePrice
   * @param openPrice The new value for openPrice
   * @param currentPrice The new value for currentPrice
   * @param highPrice The new value for highPrice
   * @param lowPrice The new value for lowPrice
   */
  public AvroStockQuotation(java.lang.CharSequence stockCode, java.lang.CharSequence stockName, java.lang.Long tradeTime, java.lang.Float preClosePrice, java.lang.Float openPrice, java.lang.Float currentPrice, java.lang.Float highPrice, java.lang.Float lowPrice) {
    this.stockCode = stockCode;
    this.stockName = stockName;
    this.tradeTime = tradeTime;
    this.preClosePrice = preClosePrice;
    this.openPrice = openPrice;
    this.currentPrice = currentPrice;
    this.highPrice = highPrice;
    this.lowPrice = lowPrice;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stockCode;
    case 1: return stockName;
    case 2: return tradeTime;
    case 3: return preClosePrice;
    case 4: return openPrice;
    case 5: return currentPrice;
    case 6: return highPrice;
    case 7: return lowPrice;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stockCode = (java.lang.CharSequence)value$; break;
    case 1: stockName = (java.lang.CharSequence)value$; break;
    case 2: tradeTime = (java.lang.Long)value$; break;
    case 3: preClosePrice = (java.lang.Float)value$; break;
    case 4: openPrice = (java.lang.Float)value$; break;
    case 5: currentPrice = (java.lang.Float)value$; break;
    case 6: highPrice = (java.lang.Float)value$; break;
    case 7: lowPrice = (java.lang.Float)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'stockCode' field.
   * @return The value of the 'stockCode' field.
   */
  public java.lang.CharSequence getStockCode() {
    return stockCode;
  }


  /**
   * Sets the value of the 'stockCode' field.
   * @param value the value to set.
   */
  public void setStockCode(java.lang.CharSequence value) {
    this.stockCode = value;
  }

  /**
   * Gets the value of the 'stockName' field.
   * @return The value of the 'stockName' field.
   */
  public java.lang.CharSequence getStockName() {
    return stockName;
  }


  /**
   * Sets the value of the 'stockName' field.
   * @param value the value to set.
   */
  public void setStockName(java.lang.CharSequence value) {
    this.stockName = value;
  }

  /**
   * Gets the value of the 'tradeTime' field.
   * @return The value of the 'tradeTime' field.
   */
  public long getTradeTime() {
    return tradeTime;
  }


  /**
   * Sets the value of the 'tradeTime' field.
   * @param value the value to set.
   */
  public void setTradeTime(long value) {
    this.tradeTime = value;
  }

  /**
   * Gets the value of the 'preClosePrice' field.
   * @return The value of the 'preClosePrice' field.
   */
  public float getPreClosePrice() {
    return preClosePrice;
  }


  /**
   * Sets the value of the 'preClosePrice' field.
   * @param value the value to set.
   */
  public void setPreClosePrice(float value) {
    this.preClosePrice = value;
  }

  /**
   * Gets the value of the 'openPrice' field.
   * @return The value of the 'openPrice' field.
   */
  public float getOpenPrice() {
    return openPrice;
  }


  /**
   * Sets the value of the 'openPrice' field.
   * @param value the value to set.
   */
  public void setOpenPrice(float value) {
    this.openPrice = value;
  }

  /**
   * Gets the value of the 'currentPrice' field.
   * @return The value of the 'currentPrice' field.
   */
  public float getCurrentPrice() {
    return currentPrice;
  }


  /**
   * Sets the value of the 'currentPrice' field.
   * @param value the value to set.
   */
  public void setCurrentPrice(float value) {
    this.currentPrice = value;
  }

  /**
   * Gets the value of the 'highPrice' field.
   * @return The value of the 'highPrice' field.
   */
  public float getHighPrice() {
    return highPrice;
  }


  /**
   * Sets the value of the 'highPrice' field.
   * @param value the value to set.
   */
  public void setHighPrice(float value) {
    this.highPrice = value;
  }

  /**
   * Gets the value of the 'lowPrice' field.
   * @return The value of the 'lowPrice' field.
   */
  public float getLowPrice() {
    return lowPrice;
  }


  /**
   * Sets the value of the 'lowPrice' field.
   * @param value the value to set.
   */
  public void setLowPrice(float value) {
    this.lowPrice = value;
  }

  /**
   * Creates a new AvroStockQuotation RecordBuilder.
   * @return A new AvroStockQuotation RecordBuilder
   */
  public static com.kafka.demo.avro.AvroStockQuotation.Builder newBuilder() {
    return new com.kafka.demo.avro.AvroStockQuotation.Builder();
  }

  /**
   * Creates a new AvroStockQuotation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroStockQuotation RecordBuilder
   */
  public static com.kafka.demo.avro.AvroStockQuotation.Builder newBuilder(com.kafka.demo.avro.AvroStockQuotation.Builder other) {
    if (other == null) {
      return new com.kafka.demo.avro.AvroStockQuotation.Builder();
    } else {
      return new com.kafka.demo.avro.AvroStockQuotation.Builder(other);
    }
  }

  /**
   * Creates a new AvroStockQuotation RecordBuilder by copying an existing AvroStockQuotation instance.
   * @param other The existing instance to copy.
   * @return A new AvroStockQuotation RecordBuilder
   */
  public static com.kafka.demo.avro.AvroStockQuotation.Builder newBuilder(com.kafka.demo.avro.AvroStockQuotation other) {
    if (other == null) {
      return new com.kafka.demo.avro.AvroStockQuotation.Builder();
    } else {
      return new com.kafka.demo.avro.AvroStockQuotation.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroStockQuotation instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroStockQuotation>
    implements org.apache.avro.data.RecordBuilder<AvroStockQuotation> {

    private java.lang.CharSequence stockCode;
    private java.lang.CharSequence stockName;
    private long tradeTime;
    private float preClosePrice;
    private float openPrice;
    private float currentPrice;
    private float highPrice;
    private float lowPrice;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafka.demo.avro.AvroStockQuotation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stockCode)) {
        this.stockCode = data().deepCopy(fields()[0].schema(), other.stockCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.stockName)) {
        this.stockName = data().deepCopy(fields()[1].schema(), other.stockName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.tradeTime)) {
        this.tradeTime = data().deepCopy(fields()[2].schema(), other.tradeTime);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.preClosePrice)) {
        this.preClosePrice = data().deepCopy(fields()[3].schema(), other.preClosePrice);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.openPrice)) {
        this.openPrice = data().deepCopy(fields()[4].schema(), other.openPrice);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.currentPrice)) {
        this.currentPrice = data().deepCopy(fields()[5].schema(), other.currentPrice);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.highPrice)) {
        this.highPrice = data().deepCopy(fields()[6].schema(), other.highPrice);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.lowPrice)) {
        this.lowPrice = data().deepCopy(fields()[7].schema(), other.lowPrice);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroStockQuotation instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafka.demo.avro.AvroStockQuotation other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.stockCode)) {
        this.stockCode = data().deepCopy(fields()[0].schema(), other.stockCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stockName)) {
        this.stockName = data().deepCopy(fields()[1].schema(), other.stockName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tradeTime)) {
        this.tradeTime = data().deepCopy(fields()[2].schema(), other.tradeTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.preClosePrice)) {
        this.preClosePrice = data().deepCopy(fields()[3].schema(), other.preClosePrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.openPrice)) {
        this.openPrice = data().deepCopy(fields()[4].schema(), other.openPrice);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currentPrice)) {
        this.currentPrice = data().deepCopy(fields()[5].schema(), other.currentPrice);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.highPrice)) {
        this.highPrice = data().deepCopy(fields()[6].schema(), other.highPrice);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.lowPrice)) {
        this.lowPrice = data().deepCopy(fields()[7].schema(), other.lowPrice);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'stockCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getStockCode() {
      return stockCode;
    }


    /**
      * Sets the value of the 'stockCode' field.
      * @param value The value of 'stockCode'.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder setStockCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.stockCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stockCode' field has been set.
      * @return True if the 'stockCode' field has been set, false otherwise.
      */
    public boolean hasStockCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stockCode' field.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder clearStockCode() {
      stockCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'stockName' field.
      * @return The value.
      */
    public java.lang.CharSequence getStockName() {
      return stockName;
    }


    /**
      * Sets the value of the 'stockName' field.
      * @param value The value of 'stockName'.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder setStockName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.stockName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'stockName' field has been set.
      * @return True if the 'stockName' field has been set, false otherwise.
      */
    public boolean hasStockName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'stockName' field.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder clearStockName() {
      stockName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradeTime' field.
      * @return The value.
      */
    public long getTradeTime() {
      return tradeTime;
    }


    /**
      * Sets the value of the 'tradeTime' field.
      * @param value The value of 'tradeTime'.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder setTradeTime(long value) {
      validate(fields()[2], value);
      this.tradeTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeTime' field has been set.
      * @return True if the 'tradeTime' field has been set, false otherwise.
      */
    public boolean hasTradeTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tradeTime' field.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder clearTradeTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'preClosePrice' field.
      * @return The value.
      */
    public float getPreClosePrice() {
      return preClosePrice;
    }


    /**
      * Sets the value of the 'preClosePrice' field.
      * @param value The value of 'preClosePrice'.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder setPreClosePrice(float value) {
      validate(fields()[3], value);
      this.preClosePrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'preClosePrice' field has been set.
      * @return True if the 'preClosePrice' field has been set, false otherwise.
      */
    public boolean hasPreClosePrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'preClosePrice' field.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder clearPreClosePrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'openPrice' field.
      * @return The value.
      */
    public float getOpenPrice() {
      return openPrice;
    }


    /**
      * Sets the value of the 'openPrice' field.
      * @param value The value of 'openPrice'.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder setOpenPrice(float value) {
      validate(fields()[4], value);
      this.openPrice = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'openPrice' field has been set.
      * @return True if the 'openPrice' field has been set, false otherwise.
      */
    public boolean hasOpenPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'openPrice' field.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder clearOpenPrice() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentPrice' field.
      * @return The value.
      */
    public float getCurrentPrice() {
      return currentPrice;
    }


    /**
      * Sets the value of the 'currentPrice' field.
      * @param value The value of 'currentPrice'.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder setCurrentPrice(float value) {
      validate(fields()[5], value);
      this.currentPrice = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'currentPrice' field has been set.
      * @return True if the 'currentPrice' field has been set, false otherwise.
      */
    public boolean hasCurrentPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'currentPrice' field.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder clearCurrentPrice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'highPrice' field.
      * @return The value.
      */
    public float getHighPrice() {
      return highPrice;
    }


    /**
      * Sets the value of the 'highPrice' field.
      * @param value The value of 'highPrice'.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder setHighPrice(float value) {
      validate(fields()[6], value);
      this.highPrice = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'highPrice' field has been set.
      * @return True if the 'highPrice' field has been set, false otherwise.
      */
    public boolean hasHighPrice() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'highPrice' field.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder clearHighPrice() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'lowPrice' field.
      * @return The value.
      */
    public float getLowPrice() {
      return lowPrice;
    }


    /**
      * Sets the value of the 'lowPrice' field.
      * @param value The value of 'lowPrice'.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder setLowPrice(float value) {
      validate(fields()[7], value);
      this.lowPrice = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'lowPrice' field has been set.
      * @return True if the 'lowPrice' field has been set, false otherwise.
      */
    public boolean hasLowPrice() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'lowPrice' field.
      * @return This builder.
      */
    public com.kafka.demo.avro.AvroStockQuotation.Builder clearLowPrice() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroStockQuotation build() {
      try {
        AvroStockQuotation record = new AvroStockQuotation();
        record.stockCode = fieldSetFlags()[0] ? this.stockCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.stockName = fieldSetFlags()[1] ? this.stockName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.tradeTime = fieldSetFlags()[2] ? this.tradeTime : (java.lang.Long) defaultValue(fields()[2]);
        record.preClosePrice = fieldSetFlags()[3] ? this.preClosePrice : (java.lang.Float) defaultValue(fields()[3]);
        record.openPrice = fieldSetFlags()[4] ? this.openPrice : (java.lang.Float) defaultValue(fields()[4]);
        record.currentPrice = fieldSetFlags()[5] ? this.currentPrice : (java.lang.Float) defaultValue(fields()[5]);
        record.highPrice = fieldSetFlags()[6] ? this.highPrice : (java.lang.Float) defaultValue(fields()[6]);
        record.lowPrice = fieldSetFlags()[7] ? this.lowPrice : (java.lang.Float) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroStockQuotation>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroStockQuotation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroStockQuotation>
    READER$ = (org.apache.avro.io.DatumReader<AvroStockQuotation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.stockCode);

    out.writeString(this.stockName);

    out.writeLong(this.tradeTime);

    out.writeFloat(this.preClosePrice);

    out.writeFloat(this.openPrice);

    out.writeFloat(this.currentPrice);

    out.writeFloat(this.highPrice);

    out.writeFloat(this.lowPrice);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.stockCode = in.readString(this.stockCode instanceof Utf8 ? (Utf8)this.stockCode : null);

      this.stockName = in.readString(this.stockName instanceof Utf8 ? (Utf8)this.stockName : null);

      this.tradeTime = in.readLong();

      this.preClosePrice = in.readFloat();

      this.openPrice = in.readFloat();

      this.currentPrice = in.readFloat();

      this.highPrice = in.readFloat();

      this.lowPrice = in.readFloat();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.stockCode = in.readString(this.stockCode instanceof Utf8 ? (Utf8)this.stockCode : null);
          break;

        case 1:
          this.stockName = in.readString(this.stockName instanceof Utf8 ? (Utf8)this.stockName : null);
          break;

        case 2:
          this.tradeTime = in.readLong();
          break;

        case 3:
          this.preClosePrice = in.readFloat();
          break;

        case 4:
          this.openPrice = in.readFloat();
          break;

        case 5:
          this.currentPrice = in.readFloat();
          break;

        case 6:
          this.highPrice = in.readFloat();
          break;

        case 7:
          this.lowPrice = in.readFloat();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










